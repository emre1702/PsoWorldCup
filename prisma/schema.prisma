// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name [Name]
// npx prisma migrate deploy
// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int      @id @default(autoincrement())
  discordId  String   @unique
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  permissions permission[]
  logs        log[]
}

enum Permission {
  SEE_TEAMS
  CREATE_TEAM
  UPDATE_TEAM
  DELETE_TEAM
  SEE_PLAYERS
  CREATE_PLAYER
  UPDATE_PLAYER
  DELETE_PLAYER
  SEE_MATCHES
  CREATE_MATCH
  UPDATE_MATCH
  DELETE_MATCH
  SEE_USERS
  CREATE_USER
  UPDATE_USER
  DELETE_USER
}

model permission {
  id        Int        @id @default(autoincrement())
  name      Permission
  user      user       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model team {
  id        Int      @id @default(autoincrement())
  name      String
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  captain   player?  @relation("team_captain", fields: [captainId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  captainId Int?     @unique

  players    player[]    @relation("player_team")
  matches1   match[]     @relation("team1")
  matches2   match[]     @relation("team2")
  statistics statistic[] @relation("statistic_team")
}

model player {
  id        Int      @id @default(autoincrement())
  name      String
  team      team?    @relation("player_team", fields: [teamId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  teamId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statistics statistic[]
  captainOf  team?       @relation("team_captain")
}

model match {
  id         Int         @id @default(autoincrement())
  team1      team        @relation("team1", fields: [team1Id], references: [id], onUpdate: Cascade, onDelete: NoAction)
  team1Id    Int
  team2      team        @relation("team2", fields: [team2Id], references: [id], onUpdate: Cascade, onDelete: NoAction)
  team2Id    Int
  scoreTeam1 Int         @default(0)
  scoreTeam2 Int         @default(0)
  date       DateTime
  round      Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  statistics statistic[]
}

model statistic {
  id            Int    @id @default(autoincrement())
  player        player @relation(fields: [playerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  playerId      Int
  match         match  @relation(fields: [matchId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  matchId       Int
  team          team   @relation("statistic_team", fields: [teamId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  teamId        Int
  score         Int    @default(0)
  passes        Int    @default(0)
  assists       Int    @default(0)
  shots         Int    @default(0)
  goals         Int    @default(0)
  tackles       Int    @default(0)
  interceptions Int    @default(0)
  catches       Int    @default(0)
  saves         Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model log {
  id     Int    @id @default(autoincrement())
  user   user   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  userId Int
  input  String @default("")
  type   LogType
  path   String @default("")
}

enum LogType {
  MUTATION
}
